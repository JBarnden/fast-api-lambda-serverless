# Good article for serverless.yml best practices:
# https://dev.to/awscommunity-asean/best-practices-in-serverless-framework-app-deployments-1nn8
#
# ================

service: my-awesome-app
useDotenv: true

package:
  individually: true

provider:
  name: aws
  runtime: python3.9
  region: ${env:AWS_REGION, "eu-west-1"}
  stage: ${opt:stage, "staging"}
  environment:
    STAGE: ${self:provider.stage}

plugins:
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-dotenv-plugin

custom:
  environment:
    DEMO_ENVIRONMENT_VARIABLE: ${env:DEMO_ENVIRONMENT_VARIABLE}

  dotenv:
    include: []

  customDomain:
    domainName: ${env:BASE_URL, "test-api.jagetech.com"}
    stage: ${self:provider.stage}
    certificateArn: ${env:CERTIFICATE_ARN}
    endointType: "edge"
    securityPolicy: tls_1_2
    apiType: rest
    autoDomain: true
    autoDomainWaitFor: 120

  pythonRequirements:
    dockerizePip: true
    layer:
      name: dependency-layer
      description: Lambda layer containing dependencies
      compatibleRuntimes:
        - python3.9

functions:
  app:
    package:
      include:
        - "main.py"

      exclude:
        - "requirements.txt"
        - "requirements-dev.txt"
        - "package.json"
        - "package-lock.json"
        - ".serverless/**"
        - ".venv/**"
        - ".virtualenv/**"
        - "node_modules/**"
        - ".env*"

    handler: main.handler
    environment:
      STAGE: ${self:provider.stage}
      # Using references in function specific env vars, see "[3] Not all environment variables have to be global" in article
      DEMO_ENVIRONMENT_VARIABLE: ${self:custom.environment.DEMO_ENVIRONMENT_VARIABLE}
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - http:
          method: any
          path: /{proxy+}